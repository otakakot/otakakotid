// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package schema

import (
	"context"
)

const findWebAuthnCredentialByRawID = `-- name: FindWebAuthnCredentialByRawID :one
SELECT
    raw_id_base64, user_id, credential_base64
FROM
    webauthn_credentials
WHERE
    raw_id_base64 = ?
`

func (q *Queries) FindWebAuthnCredentialByRawID(ctx context.Context, rawIDBase64 string) (WebauthnCredential, error) {
	row := q.db.QueryRowContext(ctx, findWebAuthnCredentialByRawID, rawIDBase64)
	var i WebauthnCredential
	err := row.Scan(&i.RawIDBase64, &i.UserID, &i.CredentialBase64)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO
    users (id, email)
VALUES
    (?, ?) RETURNING id, email
`

type InsertUserParams struct {
	ID    string
	Email string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.ID, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const insertWebAuthnCredential = `-- name: InsertWebAuthnCredential :one
INSERT INTO
    webauthn_credentials (raw_id_base64, user_id, credential_base64)
VALUES
    (?, ?, ?) RETURNING raw_id_base64, user_id, credential_base64
`

type InsertWebAuthnCredentialParams struct {
	RawIDBase64      string
	UserID           string
	CredentialBase64 string
}

func (q *Queries) InsertWebAuthnCredential(ctx context.Context, arg InsertWebAuthnCredentialParams) (WebauthnCredential, error) {
	row := q.db.QueryRowContext(ctx, insertWebAuthnCredential, arg.RawIDBase64, arg.UserID, arg.CredentialBase64)
	var i WebauthnCredential
	err := row.Scan(&i.RawIDBase64, &i.UserID, &i.CredentialBase64)
	return i, err
}
